{"version":3,"sources":["AddNewItemForm.js","TodoListFooter.js","TodoListTask.js","TodoListTasks.js","TodoListTitle.js","api.js","reducer.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["AddNewItemForm","state","error","title","deleteTask","props","deleteTodoList","id","onAddItemClick","newTitle","setState","addItem","onTitleChanged","e","setText","currentTarget","value","onKeyPress","key","render","classForInput","className","type","placeholder","onChange","onClick","React","Component","ConnectedAddNewItemForm","connect","newTextFromItemForm","dispatch","text","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTask","editMode","task","activatedEditMode","deActivatedEditMode","changeTitle","onIsDoneChanged","status","checked","changeStatus","classesForTask","this","isDone","autoFocus","onBlur","priority","TodoListTasks","tasksElements","tasks","map","t","TodoListTitle","editTitle","deActivatedEdit","updateTodoTitle","activatedEdit","deleteTodolist","instance","axios","create","baseURL","withCredentials","headers","api","newTaskTitle","todolistId","post","obj","put","todoListId","delete","taskId","get","SET_TODOLISTS","ADD_TODOLIST","DELETE_TODOLIST","DELETE_TASK","ADD_TASK","SET_TASKS","UPDATE_TASK","initialState","todolists","getTodolistTC","getState","then","res","data","createTodolistTC","newTodoList","item","newTodolist","getTasksTC","items","setTasksAC","addTaskTC","newText","newTask","addTaskAC","updateTaskTC","find","tl","forEach","resultCode","updateTaskAC","deleteTodolistTC","deleteTodolistAC","deleteTaskTC","deleteTaskAC","reducer","action","todolist","filter","console","log","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getTasks","addTask","createTask","newFilterValue","changeTask","updateTask","newTodolistTitle","updateTodolistTitle","ConnectedTodolist","thunk","updateTodolistTitleAC","updateTodolistTitleTC","App","getTodolists","addTodoList","createTodolist","todoLists","ConnectedApp","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68855e1e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\"\r\n\r\nclass AddNewItemForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    state = {\r\n        error: false,\r\n        title: \"\"\r\n    }\r\n\r\n    deleteTask = () => {\r\n        this.props.deleteTodoList(this.props.id)\r\n    }\r\n\r\n\r\n    onAddItemClick = () => {\r\n        let newTitle = this.state.title;\r\n        this.setState({title: \"\"});\r\n        if (newTitle === \"\") {\r\n            this.setState({error: true});\r\n        } else {\r\n            this.setState({error: false});\r\n            this.props.addItem(newTitle);\r\n        }\r\n    }\r\n\r\n    onTitleChanged = (e) => {\r\n        this.props.setText(e.currentTarget.value)\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    onKeyPress = (e) => {\r\n        if(e.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        let classForInput = this.state.error ? \"error\" : \"\";\r\n        return (\r\n         \r\n                <div className={\"todoList-newTaskForm\" + \" \" + \"titile-newTaskForm\"}>\r\n                    <input type=\"text\"\r\n                           onKeyPress={this.onKeyPress}\r\n                        placeholder=\"New task name\"\r\n                           onChange={this.onTitleChanged}\r\n                           className={classForInput}\r\n                           value={this.state.title}\r\n                         />\r\n                    <button onClick={this.onAddItemClick} className=\"btnNewTaskForm\">Add</button>\r\n                </div>\r\n        \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        newTextFromItemForm: state.newTextFromItemForm\r\n    }\r\n}\r\n\r\nconst mapDispatchToprops = (dispatch) => {\r\n    return {\r\n        setText: (text) => {\r\n            const action = {\r\n                type: \"SET-NEW-TEXT\",\r\n                text\r\n            };\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\nconst ConnectedAddNewItemForm = connect(mapStateToProps,  mapDispatchToprops)(AddNewItemForm);\r\nexport default ConnectedAddNewItemForm;\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass TodoListFooter extends React.Component {\r\n    state = {\r\n        isHidden: false,\r\n\r\n    }\r\n\r\n    onAllFilterClick = () => {this.props.changeFilter('All')};\r\n    onCompletedFilterClick = () => {this.props.changeFilter('Completed')};\r\n    onActiveFilterClick = () => {this.props.changeFilter('Active')};\r\n    onShowFiltersClick = () => {this.setState({isHidden: false})};\r\n    onHideFiltersClick = () => {this.setState({isHidden: true})};\r\n\r\n    render = () => {\r\n        let classForAll = (this.props.filterValue === \"All\") ? \"filter-active\" : \"\";\r\n        let classForCompleted = (this.props.filterValue === \"Completed\") ? \"filter-active\" : \"\";\r\n        let classForActive = (this.props.filterValue === \"Active\") ? \"filter-active\" : \"\";\r\n\r\n        return (\r\n            <div className=\"todoList-footer\">\r\n                {!this.state.isHidden &&\r\n                    <div className=\"todoList-footer-block\">\r\n                        <button onClick={this.onAllFilterClick}\r\n                                className={classForAll}>All</button>\r\n                        <button onClick={this.onCompletedFilterClick}\r\n                                className={classForCompleted}>Completed</button>\r\n                        <button onClick={this.onActiveFilterClick}\r\n                                className={classForActive}>Active</button>\r\n                    </div>\r\n                }\r\n                {!this.state.isHidden &&\r\n                <button onClick={this.onHideFiltersClick}>hide</button>}\r\n                {this.state.isHidden &&\r\n                <button onClick={this.onShowFiltersClick}>show</button>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass TodoListTask extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        title: this.props.task.title\r\n    }\r\n    activatedEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n    deActivatedEditMode = () => {\r\n        this.props.changeTitle(this.props.task.id, this.state.title);\r\n        this.setState({editMode: false});\r\n    }\r\n    onIsDoneChanged = (e) => {\r\n        let status = e.currentTarget.checked ? 2 : 0;\r\n        this.props.changeStatus(this.props.task.id, status)\r\n    }\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    }\r\n\r\n    deleteTask =  () =>  {\r\n        this.props.deleteTask(this.props.task.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        // let status = e.currentTarget.checked ? 2 : 0;\r\n        let classesForTask = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\r\n\r\n        return (\r\n            <div className={classesForTask}>\r\n                <input type=\"checkbox\"\r\n                    checked={this.props.task.isDone}\r\n                    onChange={this.onIsDoneChanged} />\r\n                    {this.state.editMode\r\n                        ?<input autoFocus={true}\r\n                                value={this.state.title}\r\n                                onBlur={this.deActivatedEditMode}\r\n                                onChange={this.onTitleChanged}\r\n                        />\r\n                :<span onClick={this.activatedEditMode}> {this.state.title}, priority: {this.props.task.priority}</span>}\r\n                <button className=\"buttonClose\" type=\"button\" onClick={this.deleteTask}>x</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n","import React from 'react';\r\nimport TodoListTask from './TodoListTask';\r\n\r\n\r\nclass TodoListTasks extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n    \r\n    render = () => {\r\n        const tasksElements = this.props.tasks.map( (t) => {\r\n            return <TodoListTask\r\n                task={t}\r\n                changeStatus={this.props.changeStatus}\r\n                changeTitle={this.props.changeTitle}\r\n                deleteTask={this.props.deleteTask}\r\n                key={t.id}\r\n            />\r\n        });\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                {tasksElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n\r\n","import React from 'react';\r\n\r\nclass TodoListTitle extends React.Component {\r\n    state = {\r\n        editTitle: false,\r\n        title: this.props.title\r\n    }\r\n\r\n    deActivatedEdit = () => {\r\n        this.setState({editTitle: false});\r\n        this.props.updateTodoTitle(this.state.title);\r\n    }\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({title: e.currentTarget.value});\r\n    }\r\n\r\n    activatedEdit = () => {\r\n        this.setState({editTitle: true})\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList-header__wrapper\">\r\n                <h1>\r\n                    {this.state.editTitle\r\n                        ? <input autoFocus={true}\r\n                                 value={this.state.title}\r\n                                 onBlur={this.deActivatedEdit}\r\n                                 onChange={this.onTitleChanged}\r\n                        />\r\n                        : <span onClick={this.activatedEdit}>\r\n                    {this.state.title}</span>}\r\n                </h1>\r\n                <button className=\"btnClose\" type=\"button\" onClick={this.props.deleteTodolist}>x</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTitle;\r\n","import React from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"a5358ace-4ecb-440c-9225-23342cbb6a67\"}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        return instance.post(`/${todolistId}/tasks`, {\r\n            title: newTaskTitle\r\n        });\r\n    },\r\n\r\n    createTodolist(title) {\r\n        return instance.post(\"\", {\r\n            title: title\r\n        });\r\n    },\r\n\r\n    updateTask(obj) {\r\n        return instance.put(`/${obj.todoListId}/tasks/${obj.id}`, obj);\r\n    },\r\n\r\n    deleteTodolist(todolistId) {\r\n        return instance.delete(`/${todolistId}`);\r\n    },\r\n\r\n    deleteTask(taskId, todolistId) {\r\n        return instance.delete(`/${todolistId}/tasks/${taskId}`);\r\n    },\r\n\r\n    getTodolists() {\r\n        return instance.get(\"\");\r\n\r\n    },\r\n\r\n    getTasks(todolistId) {\r\n        return instance.get(`/${todolistId}/tasks`);\r\n    },\r\n\r\n    updateTodolistTitle(title, todolistId) {\r\n        return instance.put(`/${todolistId}`, {title} );\r\n    }\r\n\r\n}","import {api} from \"./api\";\r\n\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const UPDATE_TODOLIST = \"TodoList/Reducer/UPDATE-TASK\";\r\n\r\nconst initialState = {\r\n    todolists: [\r\n        /* {\r\n             \"id\": 0, \"title\": \"every day\",\r\n             tasks: [\r\n                 {\"title\": \"css11\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n                 {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n                 {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n                 {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n                 {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n                 {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n         },\r\n         {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n         {\"id\": 2, \"title\": \"weewwe\", tasks: []},\r\n         {\"id\": 3, \"title\": \"dddd\", tasks: []}*/\r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: action.tasks\r\n                        }\r\n                    }\r\n                    return tl\r\n                })\r\n            }\r\n\r\n        case SET_TODOLISTS:\r\n            let todolists = action.todolists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    tasks: []\r\n                }\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                todolists: todolists\r\n            }\r\n        case ADD_TODOLIST:\r\n            let todolist = {\r\n                ...action.newTodolist,\r\n                tasks: []\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                todolists: [todolist, ...state.todolists]\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id != action.todolistId)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id != action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id != action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n}\r\n\r\nexport const updateTaskAC = (taskId, obj, todolistId) => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};\r\n}\r\nexport const deleteTodolistAC = (todolistId) => {\r\n    return {\r\n        type: DELETE_TODOLIST,\r\n        todolistId: todolistId\r\n    };\r\n}\r\nexport const deleteTaskAC = (taskId, todolistId) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        taskId,\r\n        todolistId\r\n    };\r\n}\r\nexport const addTaskAC = (newTask, todolistId) => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n}\r\nexport const setTasksAC = (tasks, todolistId) => {\r\n    return {type: SET_TASKS, tasks, todolistId};\r\n}\r\n\r\nexport const setTodolistsAC = (todolists) => {\r\n    return {type: SET_TODOLISTS, todolists};\r\n}\r\nexport const addTodolistAC = (newTodolist) => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        newTodolist: newTodolist\r\n    }\r\n}\r\n\r\nexport const updateTodolistTitleAC = (newTodolistTitle, todolistId) => {\r\n    return {\r\n        type: UPDATE_TODOLIST,\r\n        newTodolistTitle,\r\n        todolistId\r\n    }\r\n}\r\n\r\nexport const getTodolistTC = () => (dispatch, getState) => {\r\n    api.getTodolists().then(res => {\r\n        dispatch(setTodolistsAC(res.data));\r\n    });\r\n}\r\n\r\nexport const createTodolistTC = (newTodoList) => (dispatch, getState) => {\r\n    api.createTodolist(newTodoList).then(res => {\r\n        let newTodoList = res.data.data.item;\r\n        dispatch(addTodolistAC(newTodoList));\r\n    })\r\n}\r\n\r\nexport const getTasksTC = (todolistId) => (dispatch, getState) => {\r\n    api.getTasks(todolistId).then((res) => {\r\n        let tasks = res.data.items;\r\n        dispatch(setTasksAC(tasks, todolistId));\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (newText, todolistId) => (dispatch, getState) => {\r\n    api.createTask(newText, todolistId).then((res) => {\r\n        let newTask = res.data.data.item;\r\n        dispatch(addTaskAC(newTask, todolistId));\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (taskId, obj, todolistId) => {\r\n\r\n    return (dispatch, getState) => {\r\n        getState()\r\n            .todolists.find(tl => tl.id === todolistId)\r\n            .tasks.forEach(t => {\r\n            if (t.id === taskId) {\r\n                api.updateTask({...t, ...obj})\r\n                    .then((res) => {\r\n                        let newTask = res.data.data.item;\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(updateTaskAC(newTask));\r\n                        }\r\n                    });\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const deleteTodolistTC = (todolistId) => (dispatch, getState) => {\r\n    api.deleteTodolist(todolistId).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        }\r\n    })\r\n}\r\n\r\nexport const deleteTaskTC = (taskId, todolistId) => (dispatch, getState) => {\r\n    api.deleteTask(taskId, todolistId).then((res) => {\r\n        dispatch(deleteTaskAC(taskId, todolistId));\r\n    })\r\n}\r\n\r\n\r\nexport const updateTodolistTitleTC = (newTodolistTitle, todolistId) => (dispatch, getState) => {\r\n    api.updateTodolistTitle(newTodolistTitle, todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTodolistTitleAC(newTodolistTitle, todolistId));\r\n            }\r\n\r\n        })\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport AddNewItemForm from './AddNewItemForm';\r\nimport TodoListFooter from './TodoListFooter';\r\nimport TodoListTasks from './TodoListTasks';\r\nimport TodoListTitle from './TodoListTitle';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getTasksTC,\r\n    addTaskTC,\r\n    updateTaskTC,\r\n    deleteTodolistTC,\r\n    deleteTaskTC,\r\n    updateTodolistTitleTC\r\n} from \"./reducer\";\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        tasks: [],\r\n        filterValue: \"All\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    saveState = () => {\r\n        let stateAsString = JSON.stringify(this.state);\r\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\r\n    }\r\n\r\n    restoreState = () => {\r\n        this.props.getTasks(this.props.id);\r\n    }\r\n\r\n    addTask = (newText) => {\r\n        this.props.createTask(newText, this.props.id);\r\n\r\n    }\r\n\r\n    changeFilter = (newFilterValue) => {\r\n        this.setState( {\r\n            filterValue: newFilterValue\r\n        }, () => { this.saveState(); });\r\n    }\r\n\r\n    changeTask = (taskId, obj) => {\r\n        this.props.updateTask(taskId, obj, this.props.id);\r\n        // this.props.tasks.forEach(t => {\r\n        //     if( t.id === taskId){\r\n        //         api.updateTask(this.props.id, taskId, {...t, ...obj}).then((res) => {\r\n        //             this.props.updateTask(taskId, obj, this.props.id);\r\n        //         });\r\n        //\r\n        //     }\r\n        // })\r\n\r\n    }\r\n\r\n    deleteTodolist = () => {\r\n        this.props.deleteTodolist(this.props.id);\r\n    }\r\n\r\n    deleteTask = (taskId) => {\r\n        this.props.deleteTask(taskId, this.props.id);\r\n    }\r\n\r\n    changeStatus = (taskId, isDone) => {\r\n        this.changeTask(taskId, {isDone: isDone})\r\n    }\r\n\r\n    changeTitle = (taskId, newTitle) => {\r\n        this.changeTask(taskId, {title: newTitle})\r\n    }\r\n\r\n    updateTodoTitle = (newTodolistTitle) => {\r\n        this.props.updateTodolistTitle(newTodolistTitle, this.props.id);\r\n    }\r\n\r\n    render = () => {\r\n        let {tasks = []} = this.props;\r\n        const getFiltredTasks = (task, filter) => {\r\n            return tasks.filter(t => {\r\n                switch (filter) {\r\n                    case 'All': return true;\r\n                    case 'Completed': return t.isDone;\r\n                    case 'Active': return !t.isDone;\r\n                    default: return true\r\n                }\r\n            })\r\n        };\r\n\r\n        return (\r\n            <div className=\"App-wrapper\">\r\n                <div className=\"todoList\">\r\n                    <div className=\"todoList-header\">\r\n                        <TodoListTitle title={this.props.title} deleteTodolist={this.deleteTodolist} updateTodoTitle={this.updateTodoTitle}/>\r\n                        <AddNewItemForm addItem={this.addTask} deleteTask={this.deleteTask}/>\r\n                    </div>\r\n                    <TodoListTasks tasks={getFiltredTasks(this.props.tasks, this.state.filterValue)}\r\n                        changeStatus={this.changeStatus}\r\n                        changeTitle={this.changeTitle}\r\n                        deleteTask={this.deleteTask}\r\n                    />\r\n                    <TodoListFooter filterValue={this.state.filterValue}\r\n                        changeFilter={this.changeFilter}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToprops = (dispatch) => {\r\n    return {\r\n        addTask: (newText, todolistId) => {\r\n            const thunk = addTaskTC(newText, todolistId);\r\n            dispatch(thunk);\r\n        },\r\n\r\n        getTasks: (todolistId) => {\r\n            const thunk = getTasksTC(todolistId);\r\n            dispatch(thunk);\r\n        },\r\n\r\n        updateTask: (taskId, obj, todolistId) => {\r\n             const thunk = updateTaskTC(taskId, obj, todolistId);\r\n            dispatch(thunk);\r\n        },\r\n\r\n        deleteTodolist: (todolistId) => {\r\n             const thunk  = deleteTodolistTC(todolistId);\r\n            dispatch(thunk);\r\n        },\r\n        deleteTask: (taskId, todolistId) => {\r\n            const thunk = deleteTaskTC(taskId, todolistId);\r\n           dispatch(thunk);\r\n       },\r\n        updateTodolistTitle: (newTodolistTitle, todolistId) => {\r\n            const thunk = updateTodolistTitleTC(newTodolistTitle, todolistId);\r\n            dispatch(thunk);\r\n        },\r\n        createTask: (newText, todolistId) => {\r\n            const thunk = addTaskTC(newText, todolistId);\r\n            dispatch(thunk);\r\n        }\r\n    }\r\n}\r\n\r\nconst ConnectedTodolist = connect(null,  mapDispatchToprops)(TodoList);\r\nexport default ConnectedTodolist;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport AddNewItemForm from './AddNewItemForm';\r\nimport {connect} from \"react-redux\";\r\nimport {getTodolistTC, createTodolistTC} from \"./reducer\";\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.restoreState();\r\n    }\r\n\r\n    state = {\r\n        todolists: []\r\n    }\r\n\r\n    restoreState = () => {\r\n        this.props.getTodolists();\r\n    }\r\n\r\n    addTodoList = (title) => {\r\n        this.props.createTodolist(title);\r\n    }\r\n\r\n\r\n    render = () => {\r\n        let todoLists = this.props.todolists.map(tl => <TodoList id={tl.id} title={tl.title} tasks={tl.tasks} key={tl.id}/>)\r\n        return (\r\n            <div className=\"app\">\r\n                <div>\r\n                    <AddNewItemForm addItem={this.addTodoList} delete={this.deleteTodoList}/>\r\n                </div>    \r\n                <div className=\"appWrapper\">\r\n                    {todoLists}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todolists: state.todolists\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getTodolists: () => {\r\n            const thunk = getTodolistTC();\r\n            dispatch(thunk);\r\n        },\r\n        createTodolist: (newTodoList) => {\r\n            const thunk = createTodolistTC(newTodoList);\r\n            dispatch(thunk);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\nexport default ConnectedApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}