{"version":3,"sources":["AddNewItemForm.tsx","TodoListFooter.tsx","TodoListTask.tsx","TodoListTasks.tsx","TodoListTitle.tsx","api.tsx","reducer.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["AddNewItemForm","state","error","title","onAddItemClick","newTitle","setState","props","addItem","onTitleChanged","e","setText","currentTarget","value","onKeyPress","render","classForInput","className","type","placeholder","onChange","onClick","React","Component","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTask","editMode","task","activatedEditMode","deActivatedEditMode","changeTitle","id","onIsDoneChanged","status","checked","changeStatus","deleteTask","classesForTask","this","isDone","autoFocus","onBlur","priority","TodoListTasks","tasksElements","tasks","map","t","key","TodoListTitle","editTitle","deActivatedEdit","updateTodoTitle","activatedEdit","deleteTodolist","instance","axios","create","baseURL","withCredentials","headers","api","newTaskTitle","todolistId","post","obj","put","todoListId","delete","taskId","get","SET_TODOLISTS","ADD_TODOLIST","DELETE_TODOLIST","DELETE_TASK","ADD_TASK","SET_TASKS","UPDATE_TASK","initialState","todolists","reducer","action","tl","todolist","newTodolist","filter","newTask","console","log","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getTasksTC","addTask","newText","addTaskTC","newFilterValue","changeTask","updateTaskTC","deleteTodolistTC","deleteTaskTC","newTodolistTitle","updateTodolistTitleTC","getFiltredTasks","ConnectedTodolist","connect","dispatch","then","res","data","item","addTaskAC","items","setTasksAC","getState","find","forEach","resultCode","updateTaskAC","deleteTodolistAC","deleteTaskAC","updateTodolistTitleAC","App","getTodolistTC","addTodoList","createTodolistTC","todoLists","ConnectedApp","newTodoList","Boolean","window","location","hostname","match","rootReduser","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a11033e.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\n\n\ninterface IState {\n    title: string;\n    error: boolean;\n}\n\ninterface IProps {\n    addItem: (value: string) => void;\n    setText?: (value: string) => void;\n    deleteTask?: (value: string) => void;\n}\n\n\n// interface IMapDispatchProps {\n//     setText: () => void;\n//     // deleteTodoList: (id:string) => void;\n//     addItem: (value: string) => void;\n// }\n\nclass AddNewItemForm extends React.Component <IProps, IState> {\n\n    state:IState = {\n        error: false,\n        title: \"\"\n    }\n\n    // deleteTask = () => {\n    //     this.props.deleteTodoList(this.props.id)\n    // }\n\n\n    onAddItemClick = () => {\n        let newTitle = this.state.title;\n        this.setState({title: \"\"});\n        if (newTitle === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            this.props.addItem(newTitle);\n        }\n    }\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        if(this.props.setText) {\n            this.props.setText(e.currentTarget.value)\n        }\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        })\n    }\n\n    onKeyPress = (e: any) => {\n        if(e.currentTarget.value === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n    render = () => {\n        let classForInput = this.state.error ? \"error\" : \"\";\n        return (\n         \n                <div className={\"todoList-newTaskForm\" + \" \" + \"titile-newTaskForm\"}>\n                    <input type=\"text\"\n                           onKeyPress={this.onKeyPress}\n                        placeholder=\"New task name\"\n                           onChange={this.onTitleChanged}\n                           className={classForInput}\n                           value={this.state.title}\n                         />\n                    <button onClick={this.onAddItemClick} className=\"btnNewTaskForm\">Add</button>\n                </div>\n        \n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n// const mapStateToProps = (state: AppState) => {\n//     return {\n//         newTextFromItemForm: state.reducer\n//     }\n// }\n//\n// const mapDispatchToprops = (dispatch: Dispatch) => {\n//     return {\n//         setText: (text: string) => {\n//             const action = {\n//                 type: \"SET-NEW-TEXT\",\n//                 text\n//             };\n//             dispatch(action)\n//         }\n//     }\n// }\n// const ConnectedAddNewItemForm = connect(mapStateToProps,  mapDispatchToprops)(AddNewItemForm);\n// export default ConnectedAddNewItemForm;\n\n\n","import React from 'react';\nimport {ITask} from \"./types/types\";\n\ninterface IProps {\n    filterValue: string;\n    changeFilter: (value:string)=> void\n}\n\ninterface IState {\n    isHidden: boolean\n\n}\n\nclass TodoListFooter extends React.Component <IProps, IState> {\n\n    state: IState = {\n        isHidden: false,\n    };\n\n    onAllFilterClick = () => {this.props.changeFilter('All')};\n    onCompletedFilterClick = () => {this.props.changeFilter('Completed')};\n    onActiveFilterClick = () => {this.props.changeFilter('Active')};\n    onShowFiltersClick = () => {this.setState({isHidden: false})};\n    onHideFiltersClick = () => {this.setState({isHidden: true})};\n\n    render = () => {\n        let classForAll = (this.props.filterValue === \"All\") ? \"filter-active\" : \"\";\n        let classForCompleted = (this.props.filterValue === \"Completed\") ? \"filter-active\" : \"\";\n        let classForActive = (this.props.filterValue === \"Active\") ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden &&\n                    <div className=\"todoList-footer-block\">\n                        <button onClick={this.onAllFilterClick}\n                                className={classForAll}>All</button>\n                        <button onClick={this.onCompletedFilterClick}\n                                className={classForCompleted}>Completed</button>\n                        <button onClick={this.onActiveFilterClick}\n                                className={classForActive}>Active</button>\n                    </div>\n                }\n                {!this.state.isHidden &&\n                <button onClick={this.onHideFiltersClick}>hide</button>}\n                {this.state.isHidden &&\n                <button onClick={this.onShowFiltersClick}>show</button>}\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n\n\n\n\n\n\n\n\n\n","import React, {ChangeEvent} from 'react';\nimport {ITask} from \"./types/types\";\n\ninterface IProps {\n    task: ITask;\n    changeTitle: (id: string, title: string) => void;\n    changeStatus: (id: string, status: number) => void;\n    deleteTask: (id: string) => void;\n}\n\ninterface IState {\n    editMode: boolean;\n    title: string;\n}\n\nclass TodoListTask extends React.Component <IProps, IState> {\n\n    state: IState = {\n        editMode: false,\n        title: this.props.task.title\n    }\n    activatedEditMode = () => {\n        this.setState({editMode: true})\n    }\n    deActivatedEditMode = () => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    }\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status)\n    }\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    deleteTask =  () =>  {\n        this.props.deleteTask(this.props.task.id)\n    }\n\n\n    render() {\n        // let status = e.currentTarget.checked ? 2 : 0;\n        let classesForTask = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n\n        return (\n            <div className={classesForTask}>\n                <input type=\"checkbox\"\n                    checked={this.props.task.isDone}\n                    onChange={this.onIsDoneChanged} />\n                    {this.state.editMode\n                        ?<input autoFocus={true}\n                                value={this.state.title}\n                                onBlur={this.deActivatedEditMode}\n                                onChange={this.onTitleChanged}\n                        />\n                :<span onClick={this.activatedEditMode}> {this.state.title}, priority: {this.props.task.priority}</span>}\n                <button className=\"buttonClose\" type=\"button\" onClick={this.deleteTask}>x</button>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n","import React from 'react';\nimport TodoListTask from './TodoListTask';\nimport {ITask} from \"./types/types\";\n\ninterface IProps {\n    tasks: ITask[];\n    changeTitle: (id: string, title: string) => void;\n    changeStatus: (id: string, status: number) => void;\n    deleteTask: (id: string) => void;\n}\n\nclass TodoListTasks extends React.Component <IProps> {\n\n\n    render = () => {\n        const tasksElements = this.props.tasks.map((t) => {\n            return <TodoListTask\n                task={t}\n                changeStatus={this.props.changeStatus}\n                changeTitle={this.props.changeTitle}\n                deleteTask={this.props.deleteTask}\n                key={t.id}\n            />\n        });\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React, {ChangeEvent} from 'react';\n\ninterface IProps {\n    title: string;\n    updateTodoTitle: (todoTitle: string)=>void;\n    deleteTodolist: ()=>void\n}\n\ninterface IState {\n    editTitle: boolean;\n    title: string;\n}\n\nclass TodoListTitle extends React.Component <IProps, IState> {\n    state: IState = {\n        editTitle: false,\n        title: this.props.title\n    }\n\n\n    deActivatedEdit = () => {\n        this.setState({editTitle: false});\n        this.props.updateTodoTitle(this.state.title);\n    }\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    activatedEdit = () => {\n        this.setState({editTitle: true})\n    }\n\n    render = () => {\n        return (\n            <div className=\"todoList-header__wrapper\">\n                <h1>\n                    {this.state.editTitle\n                        ? <input autoFocus={true}\n                                 value={this.state.title}\n                                 onBlur={this.deActivatedEdit}\n                                 onChange={this.onTitleChanged}\n                        />\n                        : <span onClick={this.activatedEdit}>\n                    {this.state.title}</span>}\n                </h1>\n                <button className=\"btnClose\" type=\"button\" onClick={this.props.deleteTodolist}>x</button>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n","import React from 'react';\r\nimport axios from \"axios\";\r\nimport {ITask} from \"./types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"a5358ace-4ecb-440c-9225-23342cbb6a67\"}\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle:string, todolistId:string) {\r\n        return instance.post(`/${todolistId}/tasks`, {\r\n            title: newTaskTitle\r\n        });\r\n    },\r\n\r\n    createTodolist(title:string) {\r\n        return instance.post(\"\", {\r\n            title: title\r\n        });\r\n    },\r\n\r\n    updateTask(obj: ITask) {\r\n        return instance.put(`/${obj.todoListId}/tasks/${obj.id}`, obj);\r\n    },\r\n\r\n    deleteTodolist(todolistId:string) {\r\n        return instance.delete(`/${todolistId}`);\r\n    },\r\n\r\n    deleteTask(taskId:string, todolistId:string) {\r\n        return instance.delete(`/${todolistId}/tasks/${taskId}`);\r\n    },\r\n\r\n    getTodolists() {\r\n        return instance.get(\"\");\r\n\r\n    },\r\n\r\n    getTasks(todolistId:string) {\r\n        return instance.get(`/${todolistId}/tasks`);\r\n    },\r\n\r\n    updateTodolistTitle(title:string, todolistId:string) {\r\n        return instance.put(`/${todolistId}`, {title} );\r\n    }\r\n\r\n}","import {api} from \"./api\";\r\nimport { ITask, ITodolist} from \"./types/types\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const UPDATE_TODOLIST = \"TodoList/Reducer/UPDATE-TASK\";\r\n\r\ninterface IInitialState {\r\n    todolists: Array<ITodolist>\r\n}\r\n\r\n\r\nconst initialState:IInitialState = {\r\n    todolists: []\r\n}\r\n\r\nconst reducer = (state:IInitialState = initialState, action: any): IInitialState => {\r\n    switch (action.type) {\r\n\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodolist) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: action.tasks\r\n                        }\r\n                    }\r\n                    return tl\r\n                })\r\n            }\r\n\r\n        case SET_TODOLISTS:\r\n            let todolists = action.todolists.map((tl: ITodolist) => {\r\n                return {\r\n                    ...tl,\r\n                    tasks: []\r\n                }\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                todolists: todolists\r\n            }\r\n        case ADD_TODOLIST:\r\n            let todolist = {\r\n                ...action.newTodolist,\r\n                tasks: []\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                todolists: [todolist, ...state.todolists]\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter((tl: ITodolist) => tl.id !== action.todolistId)\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodolist) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodolist) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: ITodolist) => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n}\r\ninterface IUpdateTaskAC  {\r\n    type: string;\r\n    taskId: string;\r\n    todolistId: string;\r\n    obj: ITask;\r\n}\r\n\r\nexport const updateTaskAC = (taskId: string, obj: ITask, todolistId: string):IUpdateTaskAC  => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};\r\n}\r\n\r\ninterface IDeleteTodolistAC {\r\n    type: string;\r\n    todolistId: string;\r\n}\r\n\r\nexport const deleteTodolistAC = (todolistId: string):IDeleteTodolistAC  => {\r\n    return {\r\n        type: DELETE_TODOLIST,\r\n        todolistId: todolistId\r\n    };\r\n}\r\n\r\ninterface IDeleteTaskAC {\r\n    type: string;\r\n    taskId: string;\r\n    todolistId: string;\r\n}\r\n\r\nexport const deleteTaskAC = (taskId: string, todolistId: string):IDeleteTaskAC => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        taskId,\r\n        todolistId\r\n    };\r\n}\r\n\r\ninterface IAddTaskAC  {\r\n    type: string;\r\n    newTask: string\r\n    todolistId: string;\r\n}\r\n\r\nexport const addTaskAC = (newTask: string, todolistId: string):IAddTaskAC => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n}\r\n\r\ninterface ISetTasksAC {\r\n    type: string;\r\n    todolistId: string\r\n    tasks: Array<ITask>;\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<ITask>, todolistId: string):ISetTasksAC => {\r\n    return {type: SET_TASKS, tasks, todolistId};\r\n}\r\n\r\ninterface ISetTodolistsAC {\r\n    type: string;\r\n    todolists: Array<ITodolist>;\r\n}\r\n\r\nexport const setTodolistsAC = (todolists: Array<ITodolist>):ISetTodolistsAC => {\r\n    return {type: SET_TODOLISTS, todolists};\r\n}\r\n\r\ninterface IAddTodolistAC {\r\n    type: string;\r\n    newTodolist: string;\r\n}\r\n\r\nexport const addTodolistAC = (newTodolist: string):IAddTodolistAC => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        newTodolist: newTodolist\r\n    }\r\n}\r\n\r\ninterface IUpdateTodolistTitleAC {\r\n    type: string;\r\n    newTodolistTitle: string;\r\n    todolistId: string;\r\n}\r\n\r\nexport const updateTodolistTitleAC = (newTodolistTitle: string, todolistId: string): IUpdateTodolistTitleAC => {\r\n    return {\r\n        type: UPDATE_TODOLIST,\r\n        newTodolistTitle,\r\n        todolistId\r\n    }\r\n}\r\n\r\nexport const getTodolistTC = () => (dispatch:Dispatch) => {\r\n    api.getTodolists().then(res => {\r\n        dispatch(setTodolistsAC(res.data));\r\n    });\r\n}\r\n\r\nexport const createTodolistTC = (newTodoList: string) => (dispatch:Dispatch) => {\r\n    api.createTodolist(newTodoList).then(res => {\r\n        let newTodoList = res.data.data.item;\r\n        dispatch(addTodolistAC(newTodoList));\r\n    })\r\n}\r\n\r\nexport const getTasksTC = (todolistId: string) => (dispatch:Dispatch) => {\r\n    api.getTasks(todolistId).then((res) => {\r\n        let tasks = res.data.items;\r\n        dispatch(setTasksAC(tasks, todolistId));\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (newText: string, todolistId: string) => (dispatch:Dispatch) => {\r\n    api.createTask(newText, todolistId).then((res) => {\r\n        let newTask = res.data.data.item;\r\n        dispatch(addTaskAC(newTask, todolistId));\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, obj: [], todolistId: string) => {\r\n\r\n    return (dispatch: Dispatch, getState:any) => {\r\n        getState()\r\n            .reducer\r\n            .todolists.find((tl: ITodolist) => tl.id === todolistId)\r\n            .tasks.forEach((t: ITask) => {\r\n            if (t.id === taskId) {\r\n                debugger\r\n                api.updateTask({...t, ...obj})\r\n                    .then((res) => {\r\ndebugger\r\n                        let newTask = res.data.data.item;\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(updateTaskAC(newTask.id, newTask, newTask.todolistId));\r\n                        }\r\n                    });\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    api.deleteTodolist(todolistId).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        }\r\n    })\r\n}\r\n\r\nexport const deleteTaskTC = (taskId: string, todolistId: string) => (dispatch:Dispatch) => {\r\n    api.deleteTask(taskId, todolistId).then((res) => {\r\n        dispatch(deleteTaskAC(taskId, todolistId));\r\n    })\r\n}\r\n\r\n\r\nexport const updateTodolistTitleTC = (newTodolistTitle: string, todolistId: string) => (dispatch:Dispatch) => {\r\n    api.updateTodolistTitle(newTodolistTitle, todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTodolistTitleAC(newTodolistTitle, todolistId));\r\n            }\r\n\r\n        })\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport AddNewItemForm from './AddNewItemForm';\nimport TodoListFooter from './TodoListFooter';\nimport TodoListTasks from './TodoListTasks';\nimport TodoListTitle from './TodoListTitle';\nimport {connect} from \"react-redux\";\nimport {\n    getTasksTC,\n    addTaskTC,\n    updateTaskTC,\n    deleteTodolistTC,\n    deleteTaskTC,\n    updateTodolistTitleTC\n} from \"./reducer\";\nimport {ITask, ITodolist} from \"./types/types\";\n\ninterface IState {\n    tasks: Array<ITask>;\n    filterValue: string;\n\n}\n\n// changeStatus: (taskId:string, status:number) => void;\ninterface IMapDispatchProps {\n    getTasksTC: (id: string) => void;\n    addTaskTC: (newText: string, todolistId: string) => void;\n    updateTaskTC: (taskId: string, obj: any, id: string) => void;\n    deleteTodolistTC: (id:string) => void;\n    deleteTaskTC: (taskId:string, id: string) => void;\n    updateTodolistTitleTC: (newTodolistTitle:string, id: string) => void;\n}\n\ninterface IProps {\n    id: string;\n    title: string;\n    tasks: ITask[]\n}\n\n\nclass TodoList extends React.Component <IProps & IMapDispatchProps, IState> {\n\n\n    state: IState = {\n        tasks: [],\n        filterValue: \"All\"\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        this.props.getTasksTC(this.props.id);\n    }\n\n    addTask = (newText:string) => {\n        this.props.addTaskTC(newText, this.props.id);\n\n    }\n\n    changeFilter = (newFilterValue:string) => {\n        this.setState( {\n            filterValue: newFilterValue\n        }, () => { this.saveState(); });\n    }\n\n    changeTask = (taskId: string, obj: any) => {\n        this.props.updateTaskTC(taskId, obj, this.props.id);\n        // this.props.tasks.forEach(t => {\n        //     if( t.id === taskId){\n        //         api.updateTask(this.props.id, taskId, {...t, ...obj}).then((res) => {\n        //             this.props.updateTask(taskId, obj, this.props.id);\n        //         });\n        //\n        //     }\n        // })\n\n    }\n\n    deleteTodolist = () => {\n        this.props.deleteTodolistTC(this.props.id);\n    }\n\n    deleteTask = (taskId:string) => {\n        this.props.deleteTaskTC(taskId, this.props.id);\n    }\n\n    changeStatus = (taskId:string, status:number) => {\n        this.changeTask(taskId, {status: status})\n    }\n\n    changeTitle = (taskId:string, newTitle:string) => {\n        this.changeTask(taskId, newTitle)\n    }\n\n    updateTodoTitle = (newTodolistTitle:string) => {\n        this.props.updateTodolistTitleTC(newTodolistTitle, this.props.id);\n    }\n\n    render = () => {\n        let {tasks = []} = this.props;\n        const getFiltredTasks = (tasks: ITask[], filter: string) => {\n            return tasks.filter(t => {\n                switch (filter) {\n                    case 'All': return true;\n                    case 'Completed': return t.isDone;\n                    case 'Active': return !t.isDone;\n                    default: return true\n                }\n            })\n        };\n\n        return (\n            <div className=\"App-wrapper\">\n                <div className=\"todoList\">\n                    <div className=\"todoList-header\">\n                        <TodoListTitle title={this.props.title} deleteTodolist={this.deleteTodolist} updateTodoTitle={this.updateTodoTitle}/>\n                        <AddNewItemForm addItem={this.addTask} deleteTask={this.deleteTask}/>\n                    </div>\n                    <TodoListTasks tasks={getFiltredTasks(this.props.tasks, this.state.filterValue)}\n                        changeStatus={this.changeStatus}\n                        changeTitle={this.changeTitle}\n                        deleteTask={this.deleteTask}\n                    />\n                    <TodoListFooter filterValue={this.state.filterValue}\n                        changeFilter={this.changeFilter}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\n// const mapDispatchToprops = (dispatch: Dispatch): IMapDispatchProps => {\n//     return {\n//         addTask: (newText, todolistId) => {\n//             const thunk = addTaskTC(newText, todolistId);\n//             dispatch(thunk);\n//         },\n//\n//         getTasks: (todolistId: string) => {\n//             const thunk = getTasksTC(todolistId);\n//             dispatch(thunk);\n//         },\n//\n//         updateTask: (taskId, obj, todolistId) => {\n//              const thunk = updateTaskTC(taskId, obj, todolistId);\n//             dispatch(thunk);\n//         },\n//\n//         deleteTodolist: (todolistId) => {\n//              const thunk  = deleteTodolistTC(todolistId);\n//             dispatch(thunk);\n//         },\n//         deleteTask: (taskId, todolistId) => {\n//             const thunk = deleteTaskTC(taskId, todolistId);\n//            dispatch(thunk);\n//        },\n//         updateTodolistTitle: (newTodolistTitle, todolistId) => {\n//             const thunk = updateTodolistTitleTC(newTodolistTitle, todolistId);\n//             dispatch(thunk);\n//         },\n//         createTask: (newText, todolistId) => {\n//             const thunk = addTaskTC(newText, todolistId);\n//             dispatch(thunk);\n//         }\n//     }\n// }\n\nconst ConnectedTodolist = connect(null,  {addTaskTC, getTasksTC, updateTaskTC, deleteTodolistTC, deleteTaskTC, updateTodolistTitleTC})(TodoList);\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\nimport AddNewItemForm from './AddNewItemForm';\nimport {connect} from \"react-redux\";\nimport {getTodolistTC, createTodolistTC} from \"./reducer\";\nimport {ITodolist} from \"./types/types\";\nimport {Dispatch} from \"redux\";\nimport { AppState } from './store';\n\n\n\ninterface IMapStateProps {\n    todolists: Array<ITodolist>\n}\n\ninterface IMapDispatchProps {\n    getTodolistTC: () => void;\n    createTodolistTC: (title: string) => void;\n}\n\nexport interface IState{\n    todolists: Array<ITodolist>\n}\n\nclass App extends React.Component <IMapStateProps & IMapDispatchProps, IState > {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    state: IState = {\n        todolists: []\n    }\n\n    restoreState = () => {\n        this.props.getTodolistTC();\n    }\n\n    addTodoList = (title: string) => {\n        this.props.createTodolistTC(title);\n    }\n\n\n    render = () => {\n        let todoLists = this.props.todolists.map(tl => <TodoList id={tl.id} title={tl.title} tasks={tl.tasks} key={tl.id}/>)\n        return (\n            <div className=\"app\">\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList} />\n                </div>    \n                <div className=\"appWrapper\">\n                    {todoLists}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppState): IMapStateProps => {\n    return {\n        todolists: state.reducer.todolists\n    }\n}\n\n/*const mapDispatchToProps = (dispatch: Dispatch): IMapDispatchProps => {\n    return {\n        getTodolists: () => {\n            const thunk: any = getTodolistTC();\n            dispatch(thunk);\n        },\n        createTodolist: (newTodoList: string) => {\n            const thunk: any = createTodolistTC(newTodoList);\n            dispatch(thunk);\n        }\n\n    }\n}*/\n\nconst ConnectedApp = connect(mapStateToProps, {getTodolistTC, createTodolistTC})(App);\nexport default ConnectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet rootReduser = combineReducers( {reducer});\r\n\r\nexport type AppState = ReturnType<typeof rootReduser>\r\n\r\nconst store = createStore(rootReduser, applyMiddleware(thunkMiddleware ));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}